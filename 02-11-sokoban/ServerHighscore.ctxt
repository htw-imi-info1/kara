#BlueJ class context
comment0.target=ServerHighscore
comment0.text=\n\ Saves\ the\ highscores\ to\ the\ Greenfoot\ server\ using\ UserInfo.\ This\ can\ be\ used\ if\ published\n\ to\ the\ Greenfoot\ Gallery.\ <p>\n\ \n\ UserInfo\ is\ originally\ designed\ to\ have\ only\ one\ highscore\ but\ we\ need\ one\ highscore\ for\ every\n\ level.\ To\ work\ around\ this\ limitation,\ we\ use\ the\ available\ integers\ and\ Strings\ to\ store\ the\ \n\ users\ moves\ for\ each\ level.\ The\ score\ is\ simply\ incremented\ whenever\ someone\ adds\ a\ new\ highscore\n\ entry.\ Then\ we\ can\ use\ the\ score\ to\ get\ the\ most\ recently\ added\ players\ and\ compare\ their\ moves\ \n\ in\ each\ level.\ <p>\n\ \n\ We\ can\ save\ move\ information\ for\ a\ maximum\ of\ 105\ levels.\ For\ each\ level\n\ we\ store\ a\ maximum\ of\ 999\ moves.\ <br>\n\ The\ UserInfo\ can\ store\ 10\ integers\ and\ 5\ Strings\ of\ 50\ characters\ (at\ the\ moment).\n\ In\ an\ integer\ we\ can\ store\ 3\ levels,\ in\ a\ String\ 15\ levels.\ This\ makes\ the\ following\n\ calcualtion\:\ <br>\n\ 3\ levels\ *\ 10\ integers\ \=\ 30\ <br>\n\ 15\ levels\ *\ 5\ Strings\ \=\ 75\ <br>\n\ Total\ levels\:\ 105\n\ <p>\n\ Note\:\ Every\ User\ will\ only\ be\ stored\ once\ for\ every\ level,\ e.g.\ it\ is\ not\ possible\ for\ one\n\ user\ to\ be\ on\ first\ and\ second\ place.\n\ \n\ @author\ Marco\ Jakob\ (majakob@gmx.ch)\n\ @version\ 1.3\ (2012-07-04)\n
comment1.params=
comment1.target=ServerHighscore()
comment1.text=\n\ Constructor.\n
comment10.params=userInfo
comment10.target=void\ processUserInfo(greenfoot.UserInfo)
comment10.text=\n\ Processes\ the\ UserInfo\ and\ adds\ them\ to\ the\ highscore\ map.\ \n
comment11.params=levelNumber\ moves
comment11.target=void\ saveToMyInfo(int,\ int)
comment11.text=\n\ Savest\ the\ number\ of\ moves\ for\ the\ given\ level\ to\ the\ current\ users\n\ UserInfo.\n
comment12.params=
comment12.target=int\ newScore()
comment12.text=\n\ Creates\ a\ new\ score\ for\ the\ current\ user.\ It\ takes\ the\ current\ highest\ score\ and\n\ adds\ 1.\ This\ way\ we\ can\ always\ be\ shure\ that\ the\ top\ 315\ players\ are\ all\ possible\n\ players\ in\ any\ of\ the\ highscores.\n
comment13.params=dec
comment13.target=int\ encodeInt(int[])
comment13.text=\n\ Encodes\ the\ specified\ integers\ into\ one\ integer.\ \n\ The\ specified\ integers\ must\ be\ maximum\ 3\ and\ each\ smaller\ or\ equal\ to\ 999.\n
comment14.params=dec
comment14.target=java.lang.String\ encodeString(int[])
comment14.text=\n\ Encodes\ the\ specified\ integers\ into\ one\ String.\ \n\ The\ integers\ must\ be\ a\ maximum\ of\ 15\ and\ each\ smaller\ or\ equal\ to\ 999.\n\ The\ Strings\ are\ appended.\n
comment15.params=encoded
comment15.target=int[]\ decodeInt(int)
comment15.text=\n\ Decodes\ the\ specified\ encoded\ integer\ into\ an\ array\ of\n\ exactly\ three\ integers\ (each\ smaller\ or\ equal\ to\ 999).\n
comment16.params=encoded
comment16.target=int[]\ decodeString(java.lang.String)
comment16.text=\n\ Decodes\ the\ specified\ string\ into\ an\ array\ of\ exactly\ 15\ integers.\n\ Each\ integer\ is\ smaller\ or\ equal\ to\ 999.\n
comment2.params=
comment2.target=boolean\ isAvailable()
comment2.text=\n\ Returns\ true\ if\ the\ ServerHighscore\ is\ available\ (can\ at\ least\ read\ highscore\ info).\n
comment3.params=
comment3.target=void\ initHighscores()
comment3.text=\ \n\ Initially\ loads\ the\ highscore\ from\ the\ server.\n
comment4.params=
comment4.target=boolean\ isReadOnly()
comment4.text=\n\ Returns\ it\ the\ manager\ is\ read\ only.\n
comment5.params=
comment5.target=java.lang.String\ getCurrentPlayerName()
comment5.text=\n\ Returns\ the\ name\ of\ the\ current\ player.\ If\ the\ user\ is\ not\ logged\n\ in,\ null\ is\ returned.\n
comment6.params=currentPlayerName
comment6.target=void\ setCurrentPlayerName(java.lang.String)
comment6.text=\n\ This\ is\ ignored\ since\ the\ user\ name\ is\ set\ through\ the\ login\ in\ UserInfo.\n
comment7.params=levelNumber
comment7.target=Highscore\ getHighscoreForLevel(int)
comment7.text=\n\ Returns\ the\ Highscore\ for\ the\ specified\ level.\ The\ returned\n\ Highscore\ is\ a\ clone.\ To\ store\ a\ change\ in\ the\ highscore,\ the\ method\n\ setHighscore(...)\ must\ be\ called.\n
comment8.params=highscore
comment8.target=void\ setHighscore(Highscore)
comment8.text=\n\ Sets\ the\ specified\ Highscore\ and\ stores\ it\ to\ the\ server.\n
comment9.params=
comment9.target=void\ initHighscoresFromUserInfos()
comment9.text=\n\ Gets\ the\ top\ UserInfos\ and\ initializes\ the\ level\ move\ map.\n
numComments=17
